{"version":3,"sources":["services/devices.js","services/stations.js","components/DeviceList.jsx","components/Footer.jsx","components/Header.jsx","utils/calculator.js","components/Solution.jsx","App.js","index.js"],"names":["axios","get","then","response","data","DeviceList","props","Typography","variant","color","TableContainer","component","Paper","style","marginTop","Table","TableHead","TableRow","TableCell","TableBody","devices","map","device","to","id","latitude","longitude","Footer","fontStyle","fontSize","backgroundColor","borderTop","textAlign","padding","position","left","bottom","height","width","Header","AppBar","Toolbar","station","Math","sqrt","pow","reach","distance","useStyles","makeStyles","root","maxWidth","Solution","stations","classes","bestStation","power","calculator","reduce","prev","curr","Card","className","CardHeader","avatar","Avatar","aria-label","title","CardContent","content","CardActionArea","CardActions","actions","Button","size","target","App","useState","setDevices","setStations","useEffect","devicesService","initialDevices","stationsService","initialStations","path","render","match","find","d","params","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9af80cc2.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/devices'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, }\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/stations'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, }\r\n","import React from 'react'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  Paper,\r\n} from '@material-ui/core'\r\n\r\n\r\nconst DeviceList = ( props ) => {\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant='h6' color='inherit'>\r\n            Click the device you wanna check\r\n      </Typography>\r\n\r\n      <TableContainer component={Paper} style={{ marginTop: 20 }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Device number</TableCell>\r\n              <TableCell>X</TableCell>\r\n              <TableCell>Y</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {props.devices\r\n              .map(device => (\r\n                <TableRow key={device.id}>\r\n                  <TableCell>\r\n                    <Link to={`/solution/${device.id}`}>{device.id}</Link>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {device.latitude}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {device.longitude}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DeviceList","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'grey',\r\n    fontStyle: 'italic',\r\n    fontSize: 16,\r\n    backgroundColor: '#F8F8F8',\r\n    borderTop: '1px solid #E7E7E7',\r\n    textAlign: 'center',\r\n    padding: '20px',\r\n    position: 'fixed',\r\n    left: '0',\r\n    bottom: '0',\r\n    height: '60px',\r\n    width: '100%',\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Best Station App, Vera Popova 2020</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nexport default function Header() {\r\n  return (\r\n    <AppBar position='static' color='default'>\r\n      <Toolbar>\r\n        <Typography variant='h6' color='inherit'>\r\n          Find the best power station\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}","/**\r\n * Calculates the distance between a device and a station\r\n *\r\n * @param {Device} device Device to check\r\n * @param {Station} station Device to get distance to\r\n * @return {number} Distance from device to station\r\n */\r\n\r\nconst getDistance = (device, station) => {\r\n  return Math.sqrt(Math.pow((device.latitude - station.latitude), 2) + Math.pow((device.longitude - station.longitude), 2))\r\n}\r\n\r\n/**\r\n * Calculates the power the device may get from the link station\r\n *\r\n * @param {number} reach Station reach\r\n * @param {number} distance Distance between device and station\r\n * @return {number} Power got from the link station\r\n */\r\n\r\nconst getPower = (reach, distance) => {\r\n  return distance > reach ? 0 : Math.pow((reach - distance),2)\r\n}\r\n\r\nexport default {\r\n  getDistance,\r\n  getPower\r\n}\r\n\r\n\r\n\r\n","\r\n/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport calculator from '../utils/calculator'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport EvStationIcon from '@material-ui/icons/EvStation'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 440\r\n  },\r\n})\r\n\r\nconst Solution = ( props ) => {\r\n\r\n  if (!props.device || !props.stations) {\r\n    return null\r\n  }\r\n\r\n  const classes = useStyles()\r\n\r\n  //find the station with max power for a certaint device\r\n  const getBestStation = (stations, device) => {\r\n\r\n    let bestStation = stations.map(station => {\r\n      station.power = calculator.getPower(station.reach, calculator.getDistance(device, station))\r\n      return station\r\n    }).reduce((prev, curr) =>\r\n      prev.power > curr.power ? prev : curr\r\n    )\r\n\r\n    return bestStation\r\n  }\r\n\r\n  const bestStation = getBestStation(props.stations, props.device)\r\n\r\n  const result = () => {\r\n    if(bestStation.power > 0) {\r\n      return (\r\n        <Typography>\r\n          {`Best link station for point ${props.device.latitude}, ${props.device.longitude} is ${bestStation.latitude},\r\n          ${bestStation.longitude} with reach ${bestStation.reach}`}\r\n        </Typography>\r\n      )\r\n    }  else {\r\n      return (\r\n        <Typography>\r\n          {`No link station within reach for point ${props.device.latitude}, ${props.device.longitude}`}\r\n        </Typography>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      <Card className={classes.root}>\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n              <EvStationIcon/>\r\n            </Avatar>\r\n          }\r\n          title='The best station is...'\r\n        />\r\n        <CardContent className={classes.content}>\r\n          {result()}\r\n        </CardContent>\r\n        <CardActionArea>\r\n        </CardActionArea>\r\n        <CardActions className={classes.actions}>\r\n          <Button\r\n            size='small'\r\n            color='primary'\r\n            target='_blank'\r\n          >\r\n            <Link to={'/'}>Home Page</Link>\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Solution","import React, { useState, useEffect } from 'react'\n\nimport {\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nimport devicesService from './services/devices'\nimport stationsService from './services/stations'\n\nimport DeviceList from './components/DeviceList'\nimport Footer from './components/Footer'\nimport Header from './components/Header'\nimport Solution from './components/Solution'\n\nconst App = () => {\n\n  const [devices, setDevices] = useState([])\n  const [stations, setStations] = useState([])\n\n  useEffect(() => {\n    devicesService.getAll().then(initialDevices => {\n      setDevices(initialDevices)\n    })\n  }, [])\n\n  useEffect(() => {\n    stationsService.getAll().then(initialStations => {\n      setStations(initialStations)\n    })\n  }, [])\n\n  if (!devices || !stations) {\n    return <h5>Oops...this may take longer than usual</h5>\n  }\n\n  return (\n    <div>\n      <Header/>\n\n      <Switch>\n        <Route path=\"/solution/:id\" render={({ match }) =>\n          (\n            <div className='centered'>\n              <Solution\n                device={devices.find(d => d.id === match.params.id)}\n                stations={stations}\n              />\n            </div>\n          )\n        }\n        />\n        <Route path='/'>\n          <div className='centered'>\n            <DeviceList devices={devices}/>\n          </div>\n        </Route>\n      </Switch>\n\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n)"],"sourceRoot":""}